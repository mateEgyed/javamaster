/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Client;

import DatabaseConnection.User;
import DatabaseConnection.DbConnection;
import java.util.Iterator;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Mate
 */
public class EnterForm extends javax.swing.JDialog {

    /**
     * Creates new form EnterForm
     */
    public EnterForm(java.awt.Frame parent, boolean modal, DbConnection dbConn, boolean isActiveUser) {
        super(parent, modal);
        this.dbConn = dbConn;
        this.isActiveUser = isActiveUser;
        initComponents();
        setUsersList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        liUsers = new javax.swing.JList();
        btNewUser = new javax.swing.JButton();
        btCancel = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        ftfUser = new javax.swing.JFormattedTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Belépés");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        liUsers.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        liUsers.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                liSelectUser(evt);
            }
        });
        jScrollPane1.setViewportView(liUsers);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 9, 11, 6);
        getContentPane().add(jScrollPane1, gridBagConstraints);

        btNewUser.setText("Új felhasználó");
        btNewUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btNewUserActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 9, 11, 6);
        getContentPane().add(btNewUser, gridBagConstraints);

        btCancel.setText("Mégse");
        btCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 9, 11, 6);
        getContentPane().add(btCancel, gridBagConstraints);

        jLabel1.setText("Kérem válasszon a listában szerplő nevek közül vagy vegyen fel egy új felhasználót");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 9, 11, 6);
        getContentPane().add(jLabel1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(ftfUser, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void liSelectUser(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_liSelectUser
        sessionUser = getSelectUser();
        dispose();
    }//GEN-LAST:event_liSelectUser

    private void btNewUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btNewUserActionPerformed
        String newUser = ftfUser.getText();
        if (newUser.matches("[a-zA-Z]{3,20}")) {
            dbConn.addUser(newUser);
            setUsersList();
        } else {
            JOptionPane.showMessageDialog(this, "A név csak az ábécé kis és nagybetűit tartalmazhatja\n",
                    "Hibás név", JOptionPane.PLAIN_MESSAGE);
        }
    }//GEN-LAST:event_btNewUserActionPerformed

    private void btCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelActionPerformed
        dispose();
    }//GEN-LAST:event_btCancelActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        checkUser();
    }//GEN-LAST:event_formWindowClosing

    private void checkUser() {
        if (isActiveUser) {
            dispose();
        } else {
            if (liUsers.isSelectionEmpty()) {
                int dialogResult = JOptionPane.showConfirmDialog(this, "Biztos hogy kilépsz?",
                        "Kilépés", JOptionPane.YES_NO_OPTION);
                if (dialogResult == JOptionPane.YES_OPTION) {
                    System.exit(0);
                }
            }
        }
    }

    private User getSelectUser() {
        Iterator<User> it = dbConn.getUsers();
        while (it.hasNext()) {
            User current = it.next();
            if (current.getUserName().equals((String) liUsers.getSelectedValue().toString())) {
                return current;
            }
        }
        return null;
    }

    public User getSessionUser() {
        return sessionUser;
    }

    private void setUsersList() {
        DefaultListModel lm = new DefaultListModel();
        Iterator<User> it = dbConn.getUsers();
        if (it != null) {
            while (it.hasNext()) {
                User current = it.next();
                lm.addElement(current.getUserName());
            }
            liUsers.setModel(lm);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btCancel;
    private javax.swing.JButton btNewUser;
    private javax.swing.JFormattedTextField ftfUser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList liUsers;
    // End of variables declaration//GEN-END:variables
    private DbConnection dbConn;
    private User sessionUser;
    private boolean isActiveUser;
}
